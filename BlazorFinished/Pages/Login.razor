@page "/login"
@page "/"
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row justify-content-center mb-4">
        <div class="col-lg-6 text-center">
            <h3>Welcome To 356 Sports!</h3>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-6">
            <EditForm Model="@user" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="username" class="mb-2">Username:</label>
                    <InputText id="username" class="form-control" @bind-Value="user.UserName" />
                </div>
                <div class="form-group">
                    <label for="password" class="mb-2">Password:</label>
                    <InputText id="password" class="form-control" @bind-Value="user.Pass" type="password" />
                </div>
                <div class="text-center mt-3">
                    <button type="submit" class="btn btn-primary mr-2">Login</button>
                    <button type="button" class="btn btn-secondary" @onclick="HandleRegister">Register</button>
                </div>
            </EditForm>
        </div>
    </div>

    <div class="row justify-content-center mt-3">
        <!-- Add margin top to separate message from buttons -->
        <div class="col-lg-6 text-center">
            <p>@message</p>
        </div>
    </div>
</div>






@code {
    private User user = new User();
    private UserList userList = new UserList();
    private ApiService apiService = new ApiService();
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userList = await apiService.GetUser();
    }

    private async Task HandleLogin()
    {
        var existingUser = userList.Find(x => x.UserName == user.UserName && x.Pass == user.Pass);
        if (existingUser == null)
        {
            message = "Invalid login attempt.";
        }
        else
        {
            message = "Login successful!";
            NavigationManager.NavigateTo("/main");

        }
    }

    private async Task HandleRegister()
    {
        var existingUser = userList.FirstOrDefault(x => x.UserName == user.UserName);
        if (existingUser != null)
        {
            message = "Username already exists.";
        }
        else if (string.IsNullOrEmpty(user.UserName) || string.IsNullOrEmpty(user.Pass))
        {
            message = "Username or password cannot be empty.";
        }
        else
        {
            user.Permission = false; // Assuming default permission is false
            await apiService.InsertUser(user);

            message = "Registration successful!";
            NavigationManager.NavigateTo("/main");

        }
    }
}
<style>
    body {
        background: linear-gradient(135deg, #4a69bb, #8e54e9);
    }

</style>